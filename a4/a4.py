# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkVDWiaNVagt_LJLEJWox6ZNXLsT02np
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import matplotlib.pyplot as plt

df = pd.read_csv('/content/sample_data/winequality-white.csv', delimiter=';')
df.head()

desc_stats = df.describe().T
percentiles = df.quantile([0.25, 0.5, 0.75]).T
percentiles.columns = ['25%', '50%', '75%']
stats = pd.concat([desc_stats[['mean', 'std', 'min', 'max']], percentiles], axis=1)
print(stats)

corr_matrix = df.corr()
corr_matrix

plt.hist(df['quality'], bins=10, edgecolor='black')
plt.title('Histogram of Quality')
plt.xlabel('Quality')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(15, 10))
for i, column in enumerate(df.columns[:-1], 1):
    plt.subplot(4, 3, i)
    sns.violinplot(y=df[column])
    plt.title(column)

plt.tight_layout()
plt.show()

X_alcohol = df[['alcohol']].values
y_quality = df['quality'].values

model_single = LinearRegression()
model_single.fit(X_alcohol, y_quality)


y_pred_single = model_single.predict(X_alcohol)


intercept_single = model_single.intercept_
coef_single = model_single.coef_[0]
rmse_single = mean_squared_error(y_quality, y_pred_single, squared=False)
r2_single = r2_score(y_quality, y_pred_single)

plt.scatter(X_alcohol, y_quality, color='blue')
plt.plot(X_alcohol, y_pred_single, color='red')
plt.title('Linear Regression (Alcohol vs Quality)')
plt.xlabel('Alcohol')
plt.ylabel('Quality')
plt.show()

(intercept_single, coef_single, rmse_single, r2_single)

X_multi = df[['volatile acidity', 'alcohol', 'density']].values
y_quality = df['quality'].values

model_multi = LinearRegression()
model_multi.fit(X_multi, y_quality)

y_pred_multi = model_multi.predict(X_multi)

intercept_multi = model_multi.intercept_
coef_multi = model_multi.coef_
rmse_multi = mean_squared_error(y_quality, y_pred_multi, squared=False)
r2_multi = r2_score(y_quality, y_pred_multi)

(intercept_multi, coef_multi, rmse_multi, r2_multi)